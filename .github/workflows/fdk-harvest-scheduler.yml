name: Python application

on: [push]

jobs:
  build:
    

    runs-on: ubuntu-latest

    steps:
     - uses: actions/checkout@v1
     - name: Set up Python 3.7
       uses: actions/setup-python@v1
       with:
         python-version: 3.7
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
     - name: Lint with flake8
       run: |
         pip install flake8
         # stop the build if there are Python syntax errors or undefined names
         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
     - name: Test with pytest
       run: |
         pip install pytest
         pytest
     - name: Build Docker image
       run: docker build . --tag dcatno/fdk-harvest-scheduler:latest --tag eu.gcr.io/fdk-infra/fdk-harvest-scheduler:latest
     - name: Connect to Google Cloud
       uses: actions-hub/gcloud@master
       env:
         PROJECT_ID: fdk-infra
         APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_FDK_JENKINS_GCR }}
       with:
         args: auth configure-docker -q
     - name: Push docker image to Google Cloud
       uses: actions/gcloud/cli@master
       env:
         PROJECT_ID: fdk-infra
         APPLICATION_NAME: myproject
       with:
         runs: "sh -c"
         args: "docker -- push eu.gcr.io/fdk-infra/fdk-harvest-scheduler:latest"
     - name: Apply Helm template
       uses: stefanprodan/kube-tools@v1
       with:
         helm: 2.14.3
         command: |
           helm init
           helm repo add fdk https://informasjonsforvaltning.github.io/helm-chart/
           helm fetch --untar --untardir ./helm fdk/fdk-harvest-scheduler
           helm template --set DOCKER_IMAGE_NAME="eu.gcr.io/fdk-infra/fdk-harvest-scheduler:latest" -f ./helm/fdk-harvest-scheduler/values/staging.yaml ./helm/fdk-harvest-scheduler/ > kubectlapply.yaml
           cat kubectlapply.yaml
           chmod o+w kubectlapply.yaml
     - name: Deploy to staging
       uses: steebchen/kubectl@master
       env:
         KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
       with:
         args: "apply -f kubectlapply.yaml"